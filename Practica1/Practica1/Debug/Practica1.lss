
Practica1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000082  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000d6  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000106  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000115  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000c8  00000000  00000000  0000023b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000134  00000000  00000000  00000303  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000176  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000bc  00000000  00000000  000005d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  0000068e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	02 d0       	rcall	.+4      	; 0x46 <main>
  42:	1d c0       	rjmp	.+58     	; 0x7e <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRD = 0x80;
  46:	80 e8       	ldi	r24, 0x80	; 128
  48:	8a b9       	out	0x0a, r24	; 10
	int a = 0;
  4a:	80 e0       	ldi	r24, 0x00	; 0
  4c:	90 e0       	ldi	r25, 0x00	; 0
    while(1)
    {
        if(!(a ^ 0x100))
			a = 0;
  4e:	50 e0       	ldi	r21, 0x00	; 0
  50:	40 e0       	ldi	r20, 0x00	; 0
  52:	02 c0       	rjmp	.+4      	; 0x58 <main+0x12>
  54:	85 2f       	mov	r24, r21
  56:	94 2f       	mov	r25, r20
		PORTB = a++;
  58:	9c 01       	movw	r18, r24
  5a:	2f 5f       	subi	r18, 0xFF	; 255
  5c:	3f 4f       	sbci	r19, 0xFF	; 255
  5e:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  60:	6f e9       	ldi	r22, 0x9F	; 159
  62:	86 e8       	ldi	r24, 0x86	; 134
  64:	91 e0       	ldi	r25, 0x01	; 1
  66:	61 50       	subi	r22, 0x01	; 1
  68:	80 40       	sbci	r24, 0x00	; 0
  6a:	90 40       	sbci	r25, 0x00	; 0
  6c:	e1 f7       	brne	.-8      	; 0x66 <main+0x20>
  6e:	00 c0       	rjmp	.+0      	; 0x70 <main+0x2a>
  70:	00 00       	nop
{
	DDRD = 0x80;
	int a = 0;
    while(1)
    {
        if(!(a ^ 0x100))
  72:	21 15       	cp	r18, r1
  74:	61 e0       	ldi	r22, 0x01	; 1
  76:	36 07       	cpc	r19, r22
  78:	69 f3       	breq	.-38     	; 0x54 <main+0xe>
			a = 0;
		PORTB = a++;
  7a:	c9 01       	movw	r24, r18
  7c:	ed cf       	rjmp	.-38     	; 0x58 <main+0x12>

0000007e <_exit>:
  7e:	f8 94       	cli

00000080 <__stop_program>:
  80:	ff cf       	rjmp	.-2      	; 0x80 <__stop_program>
