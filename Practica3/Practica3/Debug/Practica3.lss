
Practica3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000012a  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000c0  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000085  00000000  00000000  000002c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000c5  00000000  00000000  00000347  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000013d  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000006b  00000000  00000000  0000057d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__bad_interrupt>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>
  26:	19 c0       	rjmp	.+50     	; 0x5a <__bad_interrupt>
  28:	18 c0       	rjmp	.+48     	; 0x5a <__bad_interrupt>
  2a:	17 c0       	rjmp	.+46     	; 0x5a <__bad_interrupt>
  2c:	16 c0       	rjmp	.+44     	; 0x5a <__bad_interrupt>
  2e:	15 c0       	rjmp	.+42     	; 0x5a <__bad_interrupt>
  30:	14 c0       	rjmp	.+40     	; 0x5a <__bad_interrupt>
  32:	13 c0       	rjmp	.+38     	; 0x5a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ea e2       	ldi	r30, 0x2A	; 42
  48:	f1 e0       	ldi	r31, 0x01	; 1
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a4 31       	cpi	r26, 0x14	; 20
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>
  56:	02 d0       	rcall	.+4      	; 0x5c <main>
  58:	66 c0       	rjmp	.+204    	; 0x126 <_exit>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <main>:


#include <avr/io.h>

int main(void)
{
  5c:	cf 93       	push	r28
  5e:	df 93       	push	r29
  60:	cd b7       	in	r28, 0x3d	; 61
  62:	de b7       	in	r29, 0x3e	; 62
  64:	64 97       	sbiw	r28, 0x14	; 20
  66:	0f b6       	in	r0, 0x3f	; 63
  68:	f8 94       	cli
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	0f be       	out	0x3f, r0	; 63
  6e:	cd bf       	out	0x3d, r28	; 61
	
	DDRB = 0xFF;
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;
  74:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xFF;
  76:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 0x00;
  78:	8b b1       	in	r24, 0x0b	; 11
  7a:	8b b9       	out	0x0b, r24	; 11
	int nums[10] = { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F };
  7c:	84 e1       	ldi	r24, 0x14	; 20
  7e:	e0 e0       	ldi	r30, 0x00	; 0
  80:	f1 e0       	ldi	r31, 0x01	; 1
  82:	de 01       	movw	r26, r28
  84:	11 96       	adiw	r26, 0x01	; 1
  86:	01 90       	ld	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	8a 95       	dec	r24
  8c:	e1 f7       	brne	.-8      	; 0x86 <main+0x2a>
	int selectedN = 0;
	PORTB = nums[(selectedN / 10 )& (0xF)];
  8e:	89 81       	ldd	r24, Y+1	; 0x01
  90:	85 b9       	out	0x05, r24	; 5
	PORTC = nums[selectedN & (0xF)];
  92:	89 81       	ldd	r24, Y+1	; 0x01
  94:	88 b9       	out	0x08, r24	; 8
    while(1)
    {
        
        selectedN =  PIND;
        PORTB = nums[(selectedN / 10)& (0xF)];
  96:	2a e0       	ldi	r18, 0x0A	; 10
  98:	30 e0       	ldi	r19, 0x00	; 0
	PORTB = nums[(selectedN / 10 )& (0xF)];
	PORTC = nums[selectedN & (0xF)];
    while(1)
    {
        
        selectedN =  PIND;
  9a:	e9 b1       	in	r30, 0x09	; 9
  9c:	8e 2f       	mov	r24, r30
  9e:	90 e0       	ldi	r25, 0x00	; 0
        PORTB = nums[(selectedN / 10)& (0xF)];
  a0:	b9 01       	movw	r22, r18
  a2:	1a d0       	rcall	.+52     	; 0xd8 <__divmodhi4>
  a4:	db 01       	movw	r26, r22
  a6:	af 70       	andi	r26, 0x0F	; 15
  a8:	bb 27       	eor	r27, r27
  aa:	aa 0f       	add	r26, r26
  ac:	bb 1f       	adc	r27, r27
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	8c 0f       	add	r24, r28
  b4:	9d 1f       	adc	r25, r29
  b6:	a8 0f       	add	r26, r24
  b8:	b9 1f       	adc	r27, r25
  ba:	8c 91       	ld	r24, X
  bc:	85 b9       	out	0x05, r24	; 5
        PORTC = nums[selectedN & (0xF)];
  be:	ef 70       	andi	r30, 0x0F	; 15
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	ee 0f       	add	r30, r30
  c4:	ff 1f       	adc	r31, r31
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	8c 0f       	add	r24, r28
  cc:	9d 1f       	adc	r25, r29
  ce:	e8 0f       	add	r30, r24
  d0:	f9 1f       	adc	r31, r25
  d2:	80 81       	ld	r24, Z
  d4:	88 b9       	out	0x08, r24	; 8
  d6:	e1 cf       	rjmp	.-62     	; 0x9a <main+0x3e>

000000d8 <__divmodhi4>:
  d8:	97 fb       	bst	r25, 7
  da:	07 2e       	mov	r0, r23
  dc:	16 f4       	brtc	.+4      	; 0xe2 <__divmodhi4+0xa>
  de:	00 94       	com	r0
  e0:	06 d0       	rcall	.+12     	; 0xee <__divmodhi4_neg1>
  e2:	77 fd       	sbrc	r23, 7
  e4:	08 d0       	rcall	.+16     	; 0xf6 <__divmodhi4_neg2>
  e6:	0b d0       	rcall	.+22     	; 0xfe <__udivmodhi4>
  e8:	07 fc       	sbrc	r0, 7
  ea:	05 d0       	rcall	.+10     	; 0xf6 <__divmodhi4_neg2>
  ec:	3e f4       	brtc	.+14     	; 0xfc <__divmodhi4_exit>

000000ee <__divmodhi4_neg1>:
  ee:	90 95       	com	r25
  f0:	81 95       	neg	r24
  f2:	9f 4f       	sbci	r25, 0xFF	; 255
  f4:	08 95       	ret

000000f6 <__divmodhi4_neg2>:
  f6:	70 95       	com	r23
  f8:	61 95       	neg	r22
  fa:	7f 4f       	sbci	r23, 0xFF	; 255

000000fc <__divmodhi4_exit>:
  fc:	08 95       	ret

000000fe <__udivmodhi4>:
  fe:	aa 1b       	sub	r26, r26
 100:	bb 1b       	sub	r27, r27
 102:	51 e1       	ldi	r21, 0x11	; 17
 104:	07 c0       	rjmp	.+14     	; 0x114 <__udivmodhi4_ep>

00000106 <__udivmodhi4_loop>:
 106:	aa 1f       	adc	r26, r26
 108:	bb 1f       	adc	r27, r27
 10a:	a6 17       	cp	r26, r22
 10c:	b7 07       	cpc	r27, r23
 10e:	10 f0       	brcs	.+4      	; 0x114 <__udivmodhi4_ep>
 110:	a6 1b       	sub	r26, r22
 112:	b7 0b       	sbc	r27, r23

00000114 <__udivmodhi4_ep>:
 114:	88 1f       	adc	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	5a 95       	dec	r21
 11a:	a9 f7       	brne	.-22     	; 0x106 <__udivmodhi4_loop>
 11c:	80 95       	com	r24
 11e:	90 95       	com	r25
 120:	bc 01       	movw	r22, r24
 122:	cd 01       	movw	r24, r26
 124:	08 95       	ret

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
