
Practica4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000001ee  00000282  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800114  00800114  00000296  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001d3  00000000  00000000  000002f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000110  00000000  00000000  000004c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000180  00000000  00000000  000005d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  0000075c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000194  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f3  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00000a6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	b7 c0       	rjmp	.+366    	; 0x172 <__vector_1>
   4:	d4 c0       	rjmp	.+424    	; 0x1ae <__vector_2>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ee ee       	ldi	r30, 0xEE	; 238
  48:	f1 e0       	ldi	r31, 0x01	; 1
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a4 31       	cpi	r26, 0x14	; 20
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a4 e1       	ldi	r26, 0x14	; 20
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a7 31       	cpi	r26, 0x17	; 23
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	02 d0       	rcall	.+4      	; 0x6c <main>
  68:	c0 c0       	rjmp	.+384    	; 0x1ea <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <main>:

uint8_t dt = 0;
uint8_t d1 = 0;
uint8_t d2 = 0;

int main (void) {
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	64 97       	sbiw	r28, 0x14	; 20
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
	DDRB=0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
	DDRC=0xFF;
  84:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x01;
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	8a b9       	out	0x0a, r24	; 10
	cli(); //Desactiva las interrupciones globales
  8a:	f8 94       	cli
	MCUCR=0x0F;
  8c:	8f e0       	ldi	r24, 0x0F	; 15
  8e:	85 bf       	out	0x35, r24	; 53
	EIMSK =0x03;
  90:	83 e0       	ldi	r24, 0x03	; 3
  92:	8d bb       	out	0x1d, r24	; 29
	EIFR = 0x03;
  94:	8c bb       	out	0x1c, r24	; 28
	int nums[10] = { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F };
  96:	84 e1       	ldi	r24, 0x14	; 20
  98:	e0 e0       	ldi	r30, 0x00	; 0
  9a:	f1 e0       	ldi	r31, 0x01	; 1
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	8a 95       	dec	r24
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x34>
	//GIFR =0x40;
	//GICR=0x40;
	sei(); //Activar las interrupciones globales
  a8:	78 94       	sei
	while(1)
	{
		dt = d1 + d2 * 10;
		dt %= 100;
  aa:	49 e2       	ldi	r20, 0x29	; 41
  ac:	34 e6       	ldi	r19, 0x64	; 100
		PORTB =  nums[dt / 10] ;	// Derecha
  ae:	2d ec       	ldi	r18, 0xCD	; 205
	//GIFR =0x40;
	//GICR=0x40;
	sei(); //Activar las interrupciones globales
	while(1)
	{
		dt = d1 + d2 * 10;
  b0:	80 91 14 01 	lds	r24, 0x0114
  b4:	88 0f       	add	r24, r24
  b6:	98 2f       	mov	r25, r24
  b8:	99 0f       	add	r25, r25
  ba:	99 0f       	add	r25, r25
  bc:	89 0f       	add	r24, r25
  be:	90 91 15 01 	lds	r25, 0x0115
  c2:	89 0f       	add	r24, r25
		dt %= 100;
  c4:	84 9f       	mul	r24, r20
  c6:	e1 2d       	mov	r30, r1
  c8:	11 24       	eor	r1, r1
  ca:	e2 95       	swap	r30
  cc:	ef 70       	andi	r30, 0x0F	; 15
  ce:	e3 9f       	mul	r30, r19
  d0:	80 19       	sub	r24, r0
  d2:	11 24       	eor	r1, r1
  d4:	80 93 16 01 	sts	0x0116, r24
		PORTB =  nums[dt / 10] ;	// Derecha
  d8:	82 9f       	mul	r24, r18
  da:	e1 2d       	mov	r30, r1
  dc:	11 24       	eor	r1, r1
  de:	e6 95       	lsr	r30
  e0:	e6 95       	lsr	r30
  e2:	e6 95       	lsr	r30
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	ee 0f       	add	r30, r30
  e8:	ff 1f       	adc	r31, r31
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	8c 0f       	add	r24, r28
  f0:	9d 1f       	adc	r25, r29
  f2:	e8 0f       	add	r30, r24
  f4:	f9 1f       	adc	r31, r25
  f6:	80 81       	ld	r24, Z
  f8:	85 b9       	out	0x05, r24	; 5
		PORTD = nums[dt % 10] >> 6;
  fa:	e0 91 16 01 	lds	r30, 0x0116
  fe:	e2 9f       	mul	r30, r18
 100:	81 2d       	mov	r24, r1
 102:	11 24       	eor	r1, r1
 104:	86 95       	lsr	r24
 106:	86 95       	lsr	r24
 108:	86 95       	lsr	r24
 10a:	88 0f       	add	r24, r24
 10c:	98 2f       	mov	r25, r24
 10e:	99 0f       	add	r25, r25
 110:	99 0f       	add	r25, r25
 112:	89 0f       	add	r24, r25
 114:	e8 1b       	sub	r30, r24
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	ee 0f       	add	r30, r30
 11a:	ff 1f       	adc	r31, r31
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	8c 0f       	add	r24, r28
 122:	9d 1f       	adc	r25, r29
 124:	e8 0f       	add	r30, r24
 126:	f9 1f       	adc	r31, r25
 128:	80 81       	ld	r24, Z
 12a:	91 81       	ldd	r25, Z+1	; 0x01
 12c:	08 2e       	mov	r0, r24
 12e:	89 2f       	mov	r24, r25
 130:	00 0c       	add	r0, r0
 132:	88 1f       	adc	r24, r24
 134:	99 0b       	sbc	r25, r25
 136:	00 0c       	add	r0, r0
 138:	88 1f       	adc	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	8b b9       	out	0x0b, r24	; 11
		PORTC =  nums[dt % 10];	// Izquierda
 13e:	e0 91 16 01 	lds	r30, 0x0116
 142:	e2 9f       	mul	r30, r18
 144:	81 2d       	mov	r24, r1
 146:	11 24       	eor	r1, r1
 148:	86 95       	lsr	r24
 14a:	86 95       	lsr	r24
 14c:	86 95       	lsr	r24
 14e:	88 0f       	add	r24, r24
 150:	98 2f       	mov	r25, r24
 152:	99 0f       	add	r25, r25
 154:	99 0f       	add	r25, r25
 156:	89 0f       	add	r24, r25
 158:	e8 1b       	sub	r30, r24
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	ee 0f       	add	r30, r30
 15e:	ff 1f       	adc	r31, r31
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	8c 0f       	add	r24, r28
 166:	9d 1f       	adc	r25, r29
 168:	e8 0f       	add	r30, r24
 16a:	f9 1f       	adc	r31, r25
 16c:	80 81       	ld	r24, Z
 16e:	88 b9       	out	0x08, r24	; 8
 170:	9f cf       	rjmp	.-194    	; 0xb0 <main+0x44>

00000172 <__vector_1>:
		
	}
}
ISR(INT0_vect) //Vector de interrupción externa del INT0
{
 172:	1f 92       	push	r1
 174:	0f 92       	push	r0
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	0f 92       	push	r0
 17a:	11 24       	eor	r1, r1
 17c:	2f 93       	push	r18
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	2f e5       	ldi	r18, 0x5F	; 95
 184:	8a ee       	ldi	r24, 0xEA	; 234
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <__vector_1+0x16>
 190:	00 c0       	rjmp	.+0      	; 0x192 <__vector_1+0x20>
 192:	00 00       	nop
	_delay_ms(300);
	d1++;
 194:	80 91 15 01 	lds	r24, 0x0115
 198:	8f 5f       	subi	r24, 0xFF	; 255
 19a:	80 93 15 01 	sts	0x0115, r24
}
 19e:	9f 91       	pop	r25
 1a0:	8f 91       	pop	r24
 1a2:	2f 91       	pop	r18
 1a4:	0f 90       	pop	r0
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	0f 90       	pop	r0
 1aa:	1f 90       	pop	r1
 1ac:	18 95       	reti

000001ae <__vector_2>:


ISR(INT1_vect) //Vector de interrupción externa del INT0
{
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	2f 93       	push	r18
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	2f e5       	ldi	r18, 0x5F	; 95
 1c0:	8a ee       	ldi	r24, 0xEA	; 234
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	21 50       	subi	r18, 0x01	; 1
 1c6:	80 40       	sbci	r24, 0x00	; 0
 1c8:	90 40       	sbci	r25, 0x00	; 0
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <__vector_2+0x16>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <__vector_2+0x20>
 1ce:	00 00       	nop
	_delay_ms(300);
	d2++;
 1d0:	80 91 14 01 	lds	r24, 0x0114
 1d4:	8f 5f       	subi	r24, 0xFF	; 255
 1d6:	80 93 14 01 	sts	0x0114, r24
}
 1da:	9f 91       	pop	r25
 1dc:	8f 91       	pop	r24
 1de:	2f 91       	pop	r18
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <_exit>:
 1ea:	f8 94       	cli

000001ec <__stop_program>:
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <__stop_program>
