
Practica4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000000f2  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000167  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000109  00000000  00000000  00000331  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000013f  00000000  00000000  0000043a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  0000057c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000185  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000e1  00000000  00000000  00000735  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00000816  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__bad_interrupt>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>
  26:	19 c0       	rjmp	.+50     	; 0x5a <__bad_interrupt>
  28:	18 c0       	rjmp	.+48     	; 0x5a <__bad_interrupt>
  2a:	17 c0       	rjmp	.+46     	; 0x5a <__bad_interrupt>
  2c:	16 c0       	rjmp	.+44     	; 0x5a <__bad_interrupt>
  2e:	15 c0       	rjmp	.+42     	; 0x5a <__bad_interrupt>
  30:	14 c0       	rjmp	.+40     	; 0x5a <__bad_interrupt>
  32:	13 c0       	rjmp	.+38     	; 0x5a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e2 ef       	ldi	r30, 0xF2	; 242
  48:	f0 e0       	ldi	r31, 0x00	; 0
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a4 31       	cpi	r26, 0x14	; 20
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>
  56:	02 d0       	rcall	.+4      	; 0x5c <main>
  58:	4a c0       	rjmp	.+148    	; 0xee <_exit>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <main>:

#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  5c:	cf 93       	push	r28
  5e:	df 93       	push	r29
  60:	cd b7       	in	r28, 0x3d	; 61
  62:	de b7       	in	r29, 0x3e	; 62
  64:	64 97       	sbiw	r28, 0x14	; 20
  66:	0f b6       	in	r0, 0x3f	; 63
  68:	f8 94       	cli
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	0f be       	out	0x3f, r0	; 63
  6e:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF;
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF;
  74:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0b11111100;
  76:	8c ef       	ldi	r24, 0xFC	; 252
  78:	87 b9       	out	0x07, r24	; 7
	
	uint8_t d1 = 0;                                /* Define a 8 bit integer variable */
	uint8_t d2 = 0;
	uint8_t status = 0;
	uint8_t dt = d1 + d2 * 10;
	int nums[10] = { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F };
  7a:	84 e1       	ldi	r24, 0x14	; 20
  7c:	e0 e0       	ldi	r30, 0x00	; 0
  7e:	f1 e0       	ldi	r31, 0x01	; 1
  80:	de 01       	movw	r26, r28
  82:	11 96       	adiw	r26, 0x01	; 1
  84:	01 90       	ld	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	8a 95       	dec	r24
  8a:	e1 f7       	brne	.-8      	; 0x84 <main+0x28>
{
	DDRB = 0xFF;
	DDRD = 0xFF;
	DDRC = 0b11111100;
	
	uint8_t d1 = 0;                                /* Define a 8 bit integer variable */
  8c:	90 e0       	ldi	r25, 0x00	; 0
			d2++;
			_delay_ms(1000);
		}
			
		dt = d1 + d2 * 10;
		PORTB =  nums[dt / 10];	// Derecha
  8e:	3d ec       	ldi	r19, 0xCD	; 205
	int nums[10] = { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F };
    while(1)
    {
		
		status = PINC & 0b00000011;
		if(status & 0x01)
  90:	30 9b       	sbis	0x06, 0	; 6
  92:	0a c0       	rjmp	.+20     	; 0xa8 <main+0x4c>
		{
			d1++;
  94:	9f 5f       	subi	r25, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	2f e3       	ldi	r18, 0x3F	; 63
  98:	4d e0       	ldi	r20, 0x0D	; 13
  9a:	53 e0       	ldi	r21, 0x03	; 3
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	40 40       	sbci	r20, 0x00	; 0
  a0:	50 40       	sbci	r21, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x40>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x4a>
  a6:	00 00       	nop
			d2++;
			_delay_ms(1000);
		}
			
		dt = d1 + d2 * 10;
		PORTB =  nums[dt / 10];	// Derecha
  a8:	93 9f       	mul	r25, r19
  aa:	81 2d       	mov	r24, r1
  ac:	11 24       	eor	r1, r1
  ae:	86 95       	lsr	r24
  b0:	86 95       	lsr	r24
  b2:	86 95       	lsr	r24
  b4:	e8 2f       	mov	r30, r24
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	ee 0f       	add	r30, r30
  ba:	ff 1f       	adc	r31, r31
  bc:	41 e0       	ldi	r20, 0x01	; 1
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	4c 0f       	add	r20, r28
  c2:	5d 1f       	adc	r21, r29
  c4:	e4 0f       	add	r30, r20
  c6:	f5 1f       	adc	r31, r21
  c8:	20 81       	ld	r18, Z
  ca:	25 b9       	out	0x05, r18	; 5
		PORTD =  nums[dt % 10];	// Izquierda
  cc:	88 0f       	add	r24, r24
  ce:	28 2f       	mov	r18, r24
  d0:	22 0f       	add	r18, r18
  d2:	22 0f       	add	r18, r18
  d4:	82 0f       	add	r24, r18
  d6:	e9 2f       	mov	r30, r25
  d8:	e8 1b       	sub	r30, r24
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	ee 0f       	add	r30, r30
  de:	ff 1f       	adc	r31, r31
  e0:	e4 0f       	add	r30, r20
  e2:	f5 1f       	adc	r31, r21
  e4:	80 81       	ld	r24, Z
  e6:	8b b9       	out	0x0b, r24	; 11
		PORTC &= 0;
  e8:	88 b1       	in	r24, 0x08	; 8
  ea:	18 b8       	out	0x08, r1	; 8
    }
  ec:	d1 cf       	rjmp	.-94     	; 0x90 <main+0x34>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
