
Practica5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000000d2  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000014f  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000f4  00000000  00000000  000002f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000148  00000000  00000000  000003ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  00000538  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000017e  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000009a  00000000  00000000  000006ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__bad_interrupt>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>
  26:	19 c0       	rjmp	.+50     	; 0x5a <__bad_interrupt>
  28:	18 c0       	rjmp	.+48     	; 0x5a <__bad_interrupt>
  2a:	17 c0       	rjmp	.+46     	; 0x5a <__bad_interrupt>
  2c:	16 c0       	rjmp	.+44     	; 0x5a <__bad_interrupt>
  2e:	15 c0       	rjmp	.+42     	; 0x5a <__bad_interrupt>
  30:	14 c0       	rjmp	.+40     	; 0x5a <__bad_interrupt>
  32:	13 c0       	rjmp	.+38     	; 0x5a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e2 ed       	ldi	r30, 0xD2	; 210
  48:	f0 e0       	ldi	r31, 0x00	; 0
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a4 31       	cpi	r26, 0x14	; 20
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>
  56:	02 d0       	rcall	.+4      	; 0x5c <main>
  58:	3a c0       	rjmp	.+116    	; 0xce <_exit>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <main>:

#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  5c:	cf 93       	push	r28
  5e:	df 93       	push	r29
  60:	cd b7       	in	r28, 0x3d	; 61
  62:	de b7       	in	r29, 0x3e	; 62
  64:	64 97       	sbiw	r28, 0x14	; 20
  66:	0f b6       	in	r0, 0x3f	; 63
  68:	f8 94       	cli
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	0f be       	out	0x3f, r0	; 63
  6e:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF;
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF;
  74:	8a b9       	out	0x0a, r24	; 10
	
	DDRC = 0b00000000;
  76:	17 b8       	out	0x07, r1	; 7
	int nums[10] = { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F };
  78:	84 e1       	ldi	r24, 0x14	; 20
  7a:	e0 e0       	ldi	r30, 0x00	; 0
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	de 01       	movw	r26, r28
  80:	11 96       	adiw	r26, 0x01	; 1
  82:	01 90       	ld	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	8a 95       	dec	r24
  88:	e1 f7       	brne	.-8      	; 0x82 <main+0x26>
	uint8_t x = 1;
	int sel = 0;
    while(1)
    {
		for(x = 1,sel = 0; x <= 64; x <<= 1, sel++)
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	60 e0       	ldi	r22, 0x00	; 0
  92:	50 e0       	ldi	r21, 0x00	; 0
  94:	41 e0       	ldi	r20, 0x01	; 1
		{
			PORTB = nums[sel];
  96:	fc 01       	movw	r30, r24
  98:	ee 0f       	add	r30, r30
  9a:	ff 1f       	adc	r31, r31
  9c:	a1 e0       	ldi	r26, 0x01	; 1
  9e:	b0 e0       	ldi	r27, 0x00	; 0
  a0:	ac 0f       	add	r26, r28
  a2:	bd 1f       	adc	r27, r29
  a4:	ea 0f       	add	r30, r26
  a6:	fb 1f       	adc	r31, r27
  a8:	30 81       	ld	r19, Z
  aa:	35 b9       	out	0x05, r19	; 5
			PORTD = ~x;
  ac:	32 2f       	mov	r19, r18
  ae:	30 95       	com	r19
  b0:	3b b9       	out	0x0b, r19	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	e7 ea       	ldi	r30, 0xA7	; 167
  b4:	f1 e6       	ldi	r31, 0x61	; 97
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x5a>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x60>
  bc:	00 00       	nop
	int nums[10] = { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F };
	uint8_t x = 1;
	int sel = 0;
    while(1)
    {
		for(x = 1,sel = 0; x <= 64; x <<= 1, sel++)
  be:	22 0f       	add	r18, r18
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	21 34       	cpi	r18, 0x41	; 65
  c4:	40 f3       	brcs	.-48     	; 0x96 <main+0x3a>
  c6:	86 2f       	mov	r24, r22
  c8:	95 2f       	mov	r25, r21
  ca:	24 2f       	mov	r18, r20
  cc:	e4 cf       	rjmp	.-56     	; 0x96 <main+0x3a>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
